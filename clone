// SURYATSAPP - WhatsApp Clone
// Features: Authentication (OTP), Messaging, Voice & Video Calls, AI Assistant (RISHI AI)

// Backend: Node.js + Firebase Authentication + Express
// Frontend: React Native + Expo

// 1. Install dependencies
// npm install express firebase-admin socket.io twilio react-native-gifted-chat cors dotenv

// 2. Backend Code (server.js)
require('dotenv').config();
const express = require('express');
const admin = require('firebase-admin');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');

let serviceAccount;
try {
  serviceAccount = require('./serviceAccountKey.json');
} catch (error) {
  console.error('Missing serviceAccountKey.json. Please provide the correct file.');
  process.exit(1);
}

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const db = admin.firestore();
const app = express();
const server = http.createServer(app);
const socketServer = socketIo(server, { cors: { origin: '*' } });

app.use(express.json());
app.use(cors());

// OTP Authentication Endpoint
app.post('/send-otp', async (req, res) => {
  const { phone } = req.body;
  try {
    if (!phone) throw new Error('Phone number is required');
    res.status(200).send({ message: 'OTP Sent!' });
  } catch (error) {
    res.status(500).send({ error: error.message });
  }
});

// Real-time Messaging
socketServer.on('connection', (socket) => {
  console.log('New client connected');
  socket.on('sendMessage', ({ sender, receiver, message }) => {
    socketServer.emit('receiveMessage', { sender, receiver, message });
  });
  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});

server.listen(3000, () => console.log('Server running on port 3000'));

// 3. React Native Frontend Code (App.js)
import React, { useState, useEffect } from 'react';
import { View, TextInput, Button, Alert } from 'react-native';
import auth from '@react-native-firebase/auth';
import { GiftedChat } from 'react-native-gifted-chat';
import io from 'socket.io-client';

const socket = io('http://your-server-ip:3000');

const App = () => {
  const [phone, setPhone] = useState('');
  const [confirm, setConfirm] = useState(null);
  const [otp, setOtp] = useState('');
  const [messages, setMessages] = useState([]);

  const sendOTP = async () => {
    try {
      if (!phone) throw new Error('Enter a valid phone number');
      const confirmation = await auth().signInWithPhoneNumber(phone);
      setConfirm(confirmation);
      Alert.alert('OTP Sent!');
    } catch (error) {
      Alert.alert('Error sending OTP:', error.message);
    }
  };

  const verifyOTP = async () => {
    try {
      if (!confirm) throw new Error('No confirmation instance available');
      if (!otp) throw new Error('Enter the OTP');
      await confirm.confirm(otp);
      Alert.alert('Logged in!');
    } catch (error) {
      Alert.alert('Invalid OTP');
    }
  };

  useEffect(() => {
    socket.on('receiveMessage', (message) => {
      setMessages((prevMessages) => GiftedChat.append(prevMessages, message));
    });
    return () => socket.off('receiveMessage');
  }, []);

  return (
    <View>
      {!confirm ? (
        <View>
          <TextInput placeholder='Enter Phone' onChangeText={setPhone} keyboardType='phone-pad' />
          <Button title='Send OTP' onPress={sendOTP} />
        </View>
      ) : (
        <View>
          <TextInput placeholder='Enter OTP' onChangeText={setOtp} keyboardType='number-pad' />
          <Button title='Verify OTP' onPress={verifyOTP} />
          <GiftedChat messages={messages} onSend={(messages) => socket.emit('sendMessage', messages[0])} />
        </View>
      )}
    </View>
  );
};

export default App;
